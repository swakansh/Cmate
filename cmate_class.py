'''
    This is a project that will provide the functionality to test code right in
    your terminal against the sample test cases that are provided in the question

    I solve lot of programming questions and what i have to do is to fetch the test case by 
    copying them and then pasting them. Lot of repetitive task which can be automated 
    using power of languages such as python.

    The basic idea of this project is to fetch the required problem page and parse it 
    to get the required test cases and their output and then test it against the output 
    generated by the code submitted for the problem.

    Enough talking let's start implementing!!

    Currently developing for Codeforces

    Will extend for :
    
    Codechef
    Hackerearth
    Hackerrank
'''

#All the necessary imports
from bs4 import BeautifulSoup as bs
import requests
import os
import itertools


#Class Codeforces
class Codeforces:
    '''
    Description:
        This class will contain all the functions
        and properties related to how things need to be done for Codeforces website
    '''
    def __init__(self, contest_code):
        #constructor
        '''
            Description:
                Initialize all the properties of Codeforces Class
        '''
        self.url = 'https://codeforces.com'
        self.MAX_TRIES = 5
        self.site = 'Codeforces'
        self.contest_code = "".join(itertools.takewhile(str.isdigit, contest_code))
        self.codeforces_folder = None
        #   Check whether necessary folder structure is in place or not
        #   So that the test files could be saved there
        home_dir = os.path.expanduser("~")
        self.codeforces_folder = os.path.join(home_dir, ".cmate", "Codeforces", self.contest_code)
        if(not os.path.exists(self.codeforces_folder)):
            os.makedirs(self.codeforces_folder)


    def construct_problem_url(self, problem_code):
        '''
            Description:
                Given the problem code like 1111C which means problem C from contest 1111
                this function is responsible for constructing the appropriate problem url.
            I/O: 
                problem_code(string)
            O/P:
                url(string)
        '''
        if problem_code:
            return self.url + '/contest/' + self.contest_code + '/problem/' + problem_code
        else:
            print("Could not construct page url.")
            exit(0)
        return None

    def get_page_data(self, problem_code):
        '''
            Description:
                Given the problem code like 1111C which means C problem from contest 1111
                this function is responsible for fetching html page from appropriate 
                problem url.
            I/O: 
                problem_code(string)
            O/P:
                html_page_data
        '''
        page_url = self.construct_problem_url(problem_code)
        
        for tries in range(self.MAX_TRIES):
            page_data = requests.get(page_url)
            if page_data.status_code == 200:
                print("Fetched Page data")
                return page_data
        
        print("Could not connect to the {} site. Try again sometime later.".format(self.site))
        exit(0)

    def get_test_cases(self, problem_code):
        '''
            Description:
                Given the HTML page data of the problem that we want to work on 
                this function parses the data to get the test cases and create the
                input and output files and store them in a respective folder.
            I/O:
                problem_page_data
            O/P:
                test cases file
        '''
        page_data = self.get_page_data(problem_code)
        soup = bs(page_data.text, features = 'html.parser')
        tests = soup.findAll("div", {"class" : "sample-tests"})
        if len(tests) > 0:
            
            #There are some inputs and output files to be considered    
            test_case_folder = os.path.join(self.codeforces_folder, problem_code)
            if(not os.path.exists(test_case_folder)):
                os.makedirs(test_case_folder)
            inputs = tests[0].findAll("div" , {"class" : "input"})
            outputs = tests[0].findAll("div" , {"class" : "output"})


            for case in range(len(inputs)):
                data = inputs[case].find('pre').text.strip()
                filename = ("input_%s" % (case + 1))
                file_ptr = open(os.path.join(test_case_folder,filename), "w")
                file_ptr.write(data)
                file_ptr.close()

            for case in range(len(outputs)):
                data = outputs[case].find('pre').text.strip()
                filename = ("output_%s" % (case + 1))
                file_ptr = open(os.path.join(test_case_folder,filename), "w")
                file_ptr.write(data)
                file_ptr.close()
        else:
            print("No test cases associated with this problem code.")